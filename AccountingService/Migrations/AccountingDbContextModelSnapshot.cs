// <auto-generated />
using System;
using AccountingService.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AccountingService.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    partial class AccountingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AccountingService.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnName("account_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("accounts");

                    b.HasData(
                        new { Id = new Guid("da8a6668-786b-4eb7-8579-b20281a11f4b"), AccountTypeId = new Guid("b9ec0e7c-c17d-4edf-8f1d-7b8cdbcc39f4"), GroupId = new Guid("06e3346c-7430-48e5-bec5-5049c3fc88a4"), Name = "Cash at Hand", OrganizationId = new Guid("a91917a6-3b46-4e58-926e-de9fe8fe497b") }
                    );
                });

            modelBuilder.Entity("AccountingService.Entities.AccountGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("account_groups");

                    b.HasData(
                        new { Id = new Guid("06e3346c-7430-48e5-bec5-5049c3fc88a4"), Name = "Assets" },
                        new { Id = new Guid("15d7775b-e017-4437-938f-4f264abd3d8a"), Name = "Liabilities" },
                        new { Id = new Guid("8b27c505-29c3-4a90-a6cf-5b3abc30cfeb"), Name = "Equity" }
                    );
                });

            modelBuilder.Entity("AccountingService.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("account_types");

                    b.HasData(
                        new { Id = new Guid("b9ec0e7c-c17d-4edf-8f1d-7b8cdbcc39f4"), GroupId = new Guid("06e3346c-7430-48e5-bec5-5049c3fc88a4"), Name = "Cash/Bank" },
                        new { Id = new Guid("b4af6ec9-bbf8-46d6-8d46-e48fb614f5ce"), GroupId = new Guid("06e3346c-7430-48e5-bec5-5049c3fc88a4"), Name = "Money in Transit" },
                        new { Id = new Guid("9a12615f-f3dd-4edd-9af6-1171c998dd25"), GroupId = new Guid("06e3346c-7430-48e5-bec5-5049c3fc88a4"), Name = "Payments from Sales" },
                        new { Id = new Guid("1dcd2296-2c2f-4a28-9aba-93f148bc6a66"), GroupId = new Guid("15d7775b-e017-4437-938f-4f264abd3d8a"), Name = "Credit Card" },
                        new { Id = new Guid("4a2da79d-2ef7-47c8-b3c8-c43df9605fe2"), GroupId = new Guid("15d7775b-e017-4437-938f-4f264abd3d8a"), Name = "Loan and Line of Credit" },
                        new { Id = new Guid("129029e9-4505-4064-a230-715bae91f187"), GroupId = new Guid("15d7775b-e017-4437-938f-4f264abd3d8a"), Name = "Taxes" },
                        new { Id = new Guid("39431e66-cde1-4018-929d-ef4c3e56b907"), GroupId = new Guid("8b27c505-29c3-4a90-a6cf-5b3abc30cfeb"), Name = "Own Contribution" },
                        new { Id = new Guid("20e1fc3b-9ee8-43c4-8a71-6d39726e98bf"), GroupId = new Guid("8b27c505-29c3-4a90-a6cf-5b3abc30cfeb"), Name = "Drawing" }
                    );
                });

            modelBuilder.Entity("AccountingService.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("organizations");

                    b.HasData(
                        new { Id = new Guid("a91917a6-3b46-4e58-926e-de9fe8fe497b"), Name = "Organization 1" },
                        new { Id = new Guid("d61ffa8d-171e-4fcd-a1ca-2248c34687fe"), Name = "Organization 2" },
                        new { Id = new Guid("b3520fc8-aa69-40a9-9008-5b3aa824ae36"), Name = "Organization 3" }
                    );
                });

            modelBuilder.Entity("AccountingService.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<double>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Note")
                        .HasColumnName("note");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnName("transaction_date");

                    b.Property<int?>("TransactionTypeId")
                        .IsRequired()
                        .HasColumnName("transaction_type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("AccountingService.Entities.TransactionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<double>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("transaction_id");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("transaction_items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TransactionItem");
                });

            modelBuilder.Entity("AccountingService.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("users");

                    b.HasData(
                        new { Id = new Guid("eeff65d8-6ee3-4acc-bbcb-35abf13982fe"), Email = "user1@Organization1.com", Name = "User 1", OrganizationId = new Guid("a91917a6-3b46-4e58-926e-de9fe8fe497b"), Password = "AQAAAAEAACcQAAAAEMsaalGFShjtzERSdhrP8IF+VuQ4JRpJYnZodsPLW281BeIVwonqFxKojgb7fuBNnw==" },
                        new { Id = new Guid("9ee8f165-4582-48ae-b2b0-971c36061385"), Email = "user2@Organization2.com", Name = "User 2", OrganizationId = new Guid("d61ffa8d-171e-4fcd-a1ca-2248c34687fe"), Password = "AQAAAAEAACcQAAAAEM3aaLzrIRQCXO27CrSfeVdYmWhGvHZ4dIz5r37y9Av6AiXaxuQCX8CTgaqkESFHDQ==" },
                        new { Id = new Guid("7fb41a45-55ed-4920-bf66-4fe6c050a528"), Email = "user3@Organization3.com", Name = "User 3", OrganizationId = new Guid("b3520fc8-aa69-40a9-9008-5b3aa824ae36"), Password = "AQAAAAEAACcQAAAAEMjnyh00ppL0PlFKNbTJ0ZIW30OONT8ExIp6DyomCPqYe3OFcFDRkmM1yVAesmElzQ==" }
                    );
                });

            modelBuilder.Entity("AccountingService.Entities.JournalTransaction", b =>
                {
                    b.HasBaseType("AccountingService.Entities.Transaction");


                    b.ToTable("transactions");

                    b.HasDiscriminator().HasValue("JournalTransaction");
                });

            modelBuilder.Entity("AccountingService.Entities.Crebit", b =>
                {
                    b.HasBaseType("AccountingService.Entities.TransactionItem");


                    b.HasIndex("TransactionId");

                    b.ToTable("transaction_items");

                    b.HasDiscriminator().HasValue("Crebit");
                });

            modelBuilder.Entity("AccountingService.Entities.Debit", b =>
                {
                    b.HasBaseType("AccountingService.Entities.TransactionItem");


                    b.HasIndex("TransactionId")
                        .HasName("IX_transaction_items_transaction_id1");

                    b.ToTable("transaction_items");

                    b.HasDiscriminator().HasValue("Debit");
                });

            modelBuilder.Entity("AccountingService.Entities.Account", b =>
                {
                    b.HasOne("AccountingService.Entities.AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountingService.Entities.Organization")
                        .WithMany("Accounts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountingService.Entities.Transaction", b =>
                {
                    b.HasOne("AccountingService.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("AccountingService.Entities.TransactionItem", b =>
                {
                    b.HasOne("AccountingService.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountingService.Entities.User", b =>
                {
                    b.HasOne("AccountingService.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("AccountingService.Entities.Crebit", b =>
                {
                    b.HasOne("AccountingService.Entities.JournalTransaction", "Transaction")
                        .WithMany("Debits")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountingService.Entities.Debit", b =>
                {
                    b.HasOne("AccountingService.Entities.JournalTransaction", "Transaction")
                        .WithMany("Credits")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_transaction_items_transactions_transaction_id1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
